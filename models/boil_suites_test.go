// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Actors", testActors)
	t.Run("Addresses", testAddresses)
	t.Run("Categories", testCategories)
	t.Run("Cities", testCities)
	t.Run("Countries", testCountries)
	t.Run("Customers", testCustomers)
	t.Run("Films", testFilms)
	t.Run("FilmActors", testFilmActors)
	t.Run("FilmCategories", testFilmCategories)
	t.Run("Inventories", testInventories)
	t.Run("Languages", testLanguages)
	t.Run("Payments", testPayments)
	t.Run("Rentals", testRentals)
	t.Run("Staffs", testStaffs)
	t.Run("Stores", testStores)
}

func TestDelete(t *testing.T) {
	t.Run("Actors", testActorsDelete)
	t.Run("Addresses", testAddressesDelete)
	t.Run("Categories", testCategoriesDelete)
	t.Run("Cities", testCitiesDelete)
	t.Run("Countries", testCountriesDelete)
	t.Run("Customers", testCustomersDelete)
	t.Run("Films", testFilmsDelete)
	t.Run("FilmActors", testFilmActorsDelete)
	t.Run("FilmCategories", testFilmCategoriesDelete)
	t.Run("Inventories", testInventoriesDelete)
	t.Run("Languages", testLanguagesDelete)
	t.Run("Payments", testPaymentsDelete)
	t.Run("Rentals", testRentalsDelete)
	t.Run("Staffs", testStaffsDelete)
	t.Run("Stores", testStoresDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Actors", testActorsQueryDeleteAll)
	t.Run("Addresses", testAddressesQueryDeleteAll)
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Cities", testCitiesQueryDeleteAll)
	t.Run("Countries", testCountriesQueryDeleteAll)
	t.Run("Customers", testCustomersQueryDeleteAll)
	t.Run("Films", testFilmsQueryDeleteAll)
	t.Run("FilmActors", testFilmActorsQueryDeleteAll)
	t.Run("FilmCategories", testFilmCategoriesQueryDeleteAll)
	t.Run("Inventories", testInventoriesQueryDeleteAll)
	t.Run("Languages", testLanguagesQueryDeleteAll)
	t.Run("Payments", testPaymentsQueryDeleteAll)
	t.Run("Rentals", testRentalsQueryDeleteAll)
	t.Run("Staffs", testStaffsQueryDeleteAll)
	t.Run("Stores", testStoresQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Actors", testActorsSliceDeleteAll)
	t.Run("Addresses", testAddressesSliceDeleteAll)
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Cities", testCitiesSliceDeleteAll)
	t.Run("Countries", testCountriesSliceDeleteAll)
	t.Run("Customers", testCustomersSliceDeleteAll)
	t.Run("Films", testFilmsSliceDeleteAll)
	t.Run("FilmActors", testFilmActorsSliceDeleteAll)
	t.Run("FilmCategories", testFilmCategoriesSliceDeleteAll)
	t.Run("Inventories", testInventoriesSliceDeleteAll)
	t.Run("Languages", testLanguagesSliceDeleteAll)
	t.Run("Payments", testPaymentsSliceDeleteAll)
	t.Run("Rentals", testRentalsSliceDeleteAll)
	t.Run("Staffs", testStaffsSliceDeleteAll)
	t.Run("Stores", testStoresSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Actors", testActorsExists)
	t.Run("Addresses", testAddressesExists)
	t.Run("Categories", testCategoriesExists)
	t.Run("Cities", testCitiesExists)
	t.Run("Countries", testCountriesExists)
	t.Run("Customers", testCustomersExists)
	t.Run("Films", testFilmsExists)
	t.Run("FilmActors", testFilmActorsExists)
	t.Run("FilmCategories", testFilmCategoriesExists)
	t.Run("Inventories", testInventoriesExists)
	t.Run("Languages", testLanguagesExists)
	t.Run("Payments", testPaymentsExists)
	t.Run("Rentals", testRentalsExists)
	t.Run("Staffs", testStaffsExists)
	t.Run("Stores", testStoresExists)
}

func TestFind(t *testing.T) {
	t.Run("Actors", testActorsFind)
	t.Run("Addresses", testAddressesFind)
	t.Run("Categories", testCategoriesFind)
	t.Run("Cities", testCitiesFind)
	t.Run("Countries", testCountriesFind)
	t.Run("Customers", testCustomersFind)
	t.Run("Films", testFilmsFind)
	t.Run("FilmActors", testFilmActorsFind)
	t.Run("FilmCategories", testFilmCategoriesFind)
	t.Run("Inventories", testInventoriesFind)
	t.Run("Languages", testLanguagesFind)
	t.Run("Payments", testPaymentsFind)
	t.Run("Rentals", testRentalsFind)
	t.Run("Staffs", testStaffsFind)
	t.Run("Stores", testStoresFind)
}

func TestBind(t *testing.T) {
	t.Run("Actors", testActorsBind)
	t.Run("Addresses", testAddressesBind)
	t.Run("Categories", testCategoriesBind)
	t.Run("Cities", testCitiesBind)
	t.Run("Countries", testCountriesBind)
	t.Run("Customers", testCustomersBind)
	t.Run("Films", testFilmsBind)
	t.Run("FilmActors", testFilmActorsBind)
	t.Run("FilmCategories", testFilmCategoriesBind)
	t.Run("Inventories", testInventoriesBind)
	t.Run("Languages", testLanguagesBind)
	t.Run("Payments", testPaymentsBind)
	t.Run("Rentals", testRentalsBind)
	t.Run("Staffs", testStaffsBind)
	t.Run("Stores", testStoresBind)
}

func TestOne(t *testing.T) {
	t.Run("Actors", testActorsOne)
	t.Run("Addresses", testAddressesOne)
	t.Run("Categories", testCategoriesOne)
	t.Run("Cities", testCitiesOne)
	t.Run("Countries", testCountriesOne)
	t.Run("Customers", testCustomersOne)
	t.Run("Films", testFilmsOne)
	t.Run("FilmActors", testFilmActorsOne)
	t.Run("FilmCategories", testFilmCategoriesOne)
	t.Run("Inventories", testInventoriesOne)
	t.Run("Languages", testLanguagesOne)
	t.Run("Payments", testPaymentsOne)
	t.Run("Rentals", testRentalsOne)
	t.Run("Staffs", testStaffsOne)
	t.Run("Stores", testStoresOne)
}

func TestAll(t *testing.T) {
	t.Run("Actors", testActorsAll)
	t.Run("Addresses", testAddressesAll)
	t.Run("Categories", testCategoriesAll)
	t.Run("Cities", testCitiesAll)
	t.Run("Countries", testCountriesAll)
	t.Run("Customers", testCustomersAll)
	t.Run("Films", testFilmsAll)
	t.Run("FilmActors", testFilmActorsAll)
	t.Run("FilmCategories", testFilmCategoriesAll)
	t.Run("Inventories", testInventoriesAll)
	t.Run("Languages", testLanguagesAll)
	t.Run("Payments", testPaymentsAll)
	t.Run("Rentals", testRentalsAll)
	t.Run("Staffs", testStaffsAll)
	t.Run("Stores", testStoresAll)
}

func TestCount(t *testing.T) {
	t.Run("Actors", testActorsCount)
	t.Run("Addresses", testAddressesCount)
	t.Run("Categories", testCategoriesCount)
	t.Run("Cities", testCitiesCount)
	t.Run("Countries", testCountriesCount)
	t.Run("Customers", testCustomersCount)
	t.Run("Films", testFilmsCount)
	t.Run("FilmActors", testFilmActorsCount)
	t.Run("FilmCategories", testFilmCategoriesCount)
	t.Run("Inventories", testInventoriesCount)
	t.Run("Languages", testLanguagesCount)
	t.Run("Payments", testPaymentsCount)
	t.Run("Rentals", testRentalsCount)
	t.Run("Staffs", testStaffsCount)
	t.Run("Stores", testStoresCount)
}

func TestHooks(t *testing.T) {
	t.Run("Actors", testActorsHooks)
	t.Run("Addresses", testAddressesHooks)
	t.Run("Categories", testCategoriesHooks)
	t.Run("Cities", testCitiesHooks)
	t.Run("Countries", testCountriesHooks)
	t.Run("Customers", testCustomersHooks)
	t.Run("Films", testFilmsHooks)
	t.Run("FilmActors", testFilmActorsHooks)
	t.Run("FilmCategories", testFilmCategoriesHooks)
	t.Run("Inventories", testInventoriesHooks)
	t.Run("Languages", testLanguagesHooks)
	t.Run("Payments", testPaymentsHooks)
	t.Run("Rentals", testRentalsHooks)
	t.Run("Staffs", testStaffsHooks)
	t.Run("Stores", testStoresHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Actors", testActorsInsert)
	t.Run("Actors", testActorsInsertWhitelist)
	t.Run("Addresses", testAddressesInsert)
	t.Run("Addresses", testAddressesInsertWhitelist)
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Cities", testCitiesInsert)
	t.Run("Cities", testCitiesInsertWhitelist)
	t.Run("Countries", testCountriesInsert)
	t.Run("Countries", testCountriesInsertWhitelist)
	t.Run("Customers", testCustomersInsert)
	t.Run("Customers", testCustomersInsertWhitelist)
	t.Run("Films", testFilmsInsert)
	t.Run("Films", testFilmsInsertWhitelist)
	t.Run("FilmActors", testFilmActorsInsert)
	t.Run("FilmActors", testFilmActorsInsertWhitelist)
	t.Run("FilmCategories", testFilmCategoriesInsert)
	t.Run("FilmCategories", testFilmCategoriesInsertWhitelist)
	t.Run("Inventories", testInventoriesInsert)
	t.Run("Inventories", testInventoriesInsertWhitelist)
	t.Run("Languages", testLanguagesInsert)
	t.Run("Languages", testLanguagesInsertWhitelist)
	t.Run("Payments", testPaymentsInsert)
	t.Run("Payments", testPaymentsInsertWhitelist)
	t.Run("Rentals", testRentalsInsert)
	t.Run("Rentals", testRentalsInsertWhitelist)
	t.Run("Staffs", testStaffsInsert)
	t.Run("Staffs", testStaffsInsertWhitelist)
	t.Run("Stores", testStoresInsert)
	t.Run("Stores", testStoresInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AddressToCityUsingCity", testAddressToOneCityUsingCity)
	t.Run("CityToCountryUsingCountry", testCityToOneCountryUsingCountry)
	t.Run("CustomerToAddressUsingAddress", testCustomerToOneAddressUsingAddress)
	t.Run("FilmToLanguageUsingLanguage", testFilmToOneLanguageUsingLanguage)
	t.Run("FilmActorToActorUsingActor", testFilmActorToOneActorUsingActor)
	t.Run("FilmActorToFilmUsingFilm", testFilmActorToOneFilmUsingFilm)
	t.Run("FilmCategoryToCategoryUsingCategory", testFilmCategoryToOneCategoryUsingCategory)
	t.Run("FilmCategoryToFilmUsingFilm", testFilmCategoryToOneFilmUsingFilm)
	t.Run("InventoryToFilmUsingFilm", testInventoryToOneFilmUsingFilm)
	t.Run("PaymentToCustomerUsingCustomer", testPaymentToOneCustomerUsingCustomer)
	t.Run("PaymentToRentalUsingRental", testPaymentToOneRentalUsingRental)
	t.Run("PaymentToStaffUsingStaff", testPaymentToOneStaffUsingStaff)
	t.Run("RentalToCustomerUsingCustomer", testRentalToOneCustomerUsingCustomer)
	t.Run("RentalToInventoryUsingInventory", testRentalToOneInventoryUsingInventory)
	t.Run("RentalToStaffUsingStaff", testRentalToOneStaffUsingStaff)
	t.Run("StaffToAddressUsingAddress", testStaffToOneAddressUsingAddress)
	t.Run("StoreToAddressUsingAddress", testStoreToOneAddressUsingAddress)
	t.Run("StoreToStaffUsingManagerStaff", testStoreToOneStaffUsingManagerStaff)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("StaffToStoreUsingManagerStaffStore", testStaffOneToOneStoreUsingManagerStaffStore)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ActorToFilmActors", testActorToManyFilmActors)
	t.Run("AddressToCustomers", testAddressToManyCustomers)
	t.Run("AddressToStaffs", testAddressToManyStaffs)
	t.Run("AddressToStores", testAddressToManyStores)
	t.Run("CategoryToFilmCategories", testCategoryToManyFilmCategories)
	t.Run("CityToAddresses", testCityToManyAddresses)
	t.Run("CountryToCities", testCountryToManyCities)
	t.Run("CustomerToPayments", testCustomerToManyPayments)
	t.Run("CustomerToRentals", testCustomerToManyRentals)
	t.Run("FilmToFilmActors", testFilmToManyFilmActors)
	t.Run("FilmToFilmCategories", testFilmToManyFilmCategories)
	t.Run("FilmToInventories", testFilmToManyInventories)
	t.Run("InventoryToRentals", testInventoryToManyRentals)
	t.Run("LanguageToFilms", testLanguageToManyFilms)
	t.Run("RentalToPayments", testRentalToManyPayments)
	t.Run("StaffToPayments", testStaffToManyPayments)
	t.Run("StaffToRentals", testStaffToManyRentals)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AddressToCityUsingAddresses", testAddressToOneSetOpCityUsingCity)
	t.Run("CityToCountryUsingCities", testCityToOneSetOpCountryUsingCountry)
	t.Run("CustomerToAddressUsingCustomers", testCustomerToOneSetOpAddressUsingAddress)
	t.Run("FilmToLanguageUsingFilms", testFilmToOneSetOpLanguageUsingLanguage)
	t.Run("FilmActorToActorUsingFilmActors", testFilmActorToOneSetOpActorUsingActor)
	t.Run("FilmActorToFilmUsingFilmActors", testFilmActorToOneSetOpFilmUsingFilm)
	t.Run("FilmCategoryToCategoryUsingFilmCategories", testFilmCategoryToOneSetOpCategoryUsingCategory)
	t.Run("FilmCategoryToFilmUsingFilmCategories", testFilmCategoryToOneSetOpFilmUsingFilm)
	t.Run("InventoryToFilmUsingInventories", testInventoryToOneSetOpFilmUsingFilm)
	t.Run("PaymentToCustomerUsingPayments", testPaymentToOneSetOpCustomerUsingCustomer)
	t.Run("PaymentToRentalUsingPayments", testPaymentToOneSetOpRentalUsingRental)
	t.Run("PaymentToStaffUsingPayments", testPaymentToOneSetOpStaffUsingStaff)
	t.Run("RentalToCustomerUsingRentals", testRentalToOneSetOpCustomerUsingCustomer)
	t.Run("RentalToInventoryUsingRentals", testRentalToOneSetOpInventoryUsingInventory)
	t.Run("RentalToStaffUsingRentals", testRentalToOneSetOpStaffUsingStaff)
	t.Run("StaffToAddressUsingStaffs", testStaffToOneSetOpAddressUsingAddress)
	t.Run("StoreToAddressUsingStores", testStoreToOneSetOpAddressUsingAddress)
	t.Run("StoreToStaffUsingManagerStaffStore", testStoreToOneSetOpStaffUsingManagerStaff)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("StaffToStoreUsingManagerStaffStore", testStaffOneToOneSetOpStoreUsingManagerStaffStore)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ActorToFilmActors", testActorToManyAddOpFilmActors)
	t.Run("AddressToCustomers", testAddressToManyAddOpCustomers)
	t.Run("AddressToStaffs", testAddressToManyAddOpStaffs)
	t.Run("AddressToStores", testAddressToManyAddOpStores)
	t.Run("CategoryToFilmCategories", testCategoryToManyAddOpFilmCategories)
	t.Run("CityToAddresses", testCityToManyAddOpAddresses)
	t.Run("CountryToCities", testCountryToManyAddOpCities)
	t.Run("CustomerToPayments", testCustomerToManyAddOpPayments)
	t.Run("CustomerToRentals", testCustomerToManyAddOpRentals)
	t.Run("FilmToFilmActors", testFilmToManyAddOpFilmActors)
	t.Run("FilmToFilmCategories", testFilmToManyAddOpFilmCategories)
	t.Run("FilmToInventories", testFilmToManyAddOpInventories)
	t.Run("InventoryToRentals", testInventoryToManyAddOpRentals)
	t.Run("LanguageToFilms", testLanguageToManyAddOpFilms)
	t.Run("RentalToPayments", testRentalToManyAddOpPayments)
	t.Run("StaffToPayments", testStaffToManyAddOpPayments)
	t.Run("StaffToRentals", testStaffToManyAddOpRentals)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Actors", testActorsReload)
	t.Run("Addresses", testAddressesReload)
	t.Run("Categories", testCategoriesReload)
	t.Run("Cities", testCitiesReload)
	t.Run("Countries", testCountriesReload)
	t.Run("Customers", testCustomersReload)
	t.Run("Films", testFilmsReload)
	t.Run("FilmActors", testFilmActorsReload)
	t.Run("FilmCategories", testFilmCategoriesReload)
	t.Run("Inventories", testInventoriesReload)
	t.Run("Languages", testLanguagesReload)
	t.Run("Payments", testPaymentsReload)
	t.Run("Rentals", testRentalsReload)
	t.Run("Staffs", testStaffsReload)
	t.Run("Stores", testStoresReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Actors", testActorsReloadAll)
	t.Run("Addresses", testAddressesReloadAll)
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Cities", testCitiesReloadAll)
	t.Run("Countries", testCountriesReloadAll)
	t.Run("Customers", testCustomersReloadAll)
	t.Run("Films", testFilmsReloadAll)
	t.Run("FilmActors", testFilmActorsReloadAll)
	t.Run("FilmCategories", testFilmCategoriesReloadAll)
	t.Run("Inventories", testInventoriesReloadAll)
	t.Run("Languages", testLanguagesReloadAll)
	t.Run("Payments", testPaymentsReloadAll)
	t.Run("Rentals", testRentalsReloadAll)
	t.Run("Staffs", testStaffsReloadAll)
	t.Run("Stores", testStoresReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Actors", testActorsSelect)
	t.Run("Addresses", testAddressesSelect)
	t.Run("Categories", testCategoriesSelect)
	t.Run("Cities", testCitiesSelect)
	t.Run("Countries", testCountriesSelect)
	t.Run("Customers", testCustomersSelect)
	t.Run("Films", testFilmsSelect)
	t.Run("FilmActors", testFilmActorsSelect)
	t.Run("FilmCategories", testFilmCategoriesSelect)
	t.Run("Inventories", testInventoriesSelect)
	t.Run("Languages", testLanguagesSelect)
	t.Run("Payments", testPaymentsSelect)
	t.Run("Rentals", testRentalsSelect)
	t.Run("Staffs", testStaffsSelect)
	t.Run("Stores", testStoresSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Actors", testActorsUpdate)
	t.Run("Addresses", testAddressesUpdate)
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Cities", testCitiesUpdate)
	t.Run("Countries", testCountriesUpdate)
	t.Run("Customers", testCustomersUpdate)
	t.Run("Films", testFilmsUpdate)
	t.Run("FilmActors", testFilmActorsUpdate)
	t.Run("FilmCategories", testFilmCategoriesUpdate)
	t.Run("Inventories", testInventoriesUpdate)
	t.Run("Languages", testLanguagesUpdate)
	t.Run("Payments", testPaymentsUpdate)
	t.Run("Rentals", testRentalsUpdate)
	t.Run("Staffs", testStaffsUpdate)
	t.Run("Stores", testStoresUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Actors", testActorsSliceUpdateAll)
	t.Run("Addresses", testAddressesSliceUpdateAll)
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Cities", testCitiesSliceUpdateAll)
	t.Run("Countries", testCountriesSliceUpdateAll)
	t.Run("Customers", testCustomersSliceUpdateAll)
	t.Run("Films", testFilmsSliceUpdateAll)
	t.Run("FilmActors", testFilmActorsSliceUpdateAll)
	t.Run("FilmCategories", testFilmCategoriesSliceUpdateAll)
	t.Run("Inventories", testInventoriesSliceUpdateAll)
	t.Run("Languages", testLanguagesSliceUpdateAll)
	t.Run("Payments", testPaymentsSliceUpdateAll)
	t.Run("Rentals", testRentalsSliceUpdateAll)
	t.Run("Staffs", testStaffsSliceUpdateAll)
	t.Run("Stores", testStoresSliceUpdateAll)
}
