// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Rental is an object representing the database table.
type Rental struct {
	RentalID    int       `boil:"rental_id" json:"rental_id" toml:"rental_id" yaml:"rental_id"`
	RentalDate  time.Time `boil:"rental_date" json:"rental_date" toml:"rental_date" yaml:"rental_date"`
	InventoryID int       `boil:"inventory_id" json:"inventory_id" toml:"inventory_id" yaml:"inventory_id"`
	CustomerID  int       `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	ReturnDate  null.Time `boil:"return_date" json:"return_date,omitempty" toml:"return_date" yaml:"return_date,omitempty"`
	StaffID     int       `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	LastUpdate  time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *rentalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rentalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RentalColumns = struct {
	RentalID    string
	RentalDate  string
	InventoryID string
	CustomerID  string
	ReturnDate  string
	StaffID     string
	LastUpdate  string
}{
	RentalID:    "rental_id",
	RentalDate:  "rental_date",
	InventoryID: "inventory_id",
	CustomerID:  "customer_id",
	ReturnDate:  "return_date",
	StaffID:     "staff_id",
	LastUpdate:  "last_update",
}

// Generated where

var RentalWhere = struct {
	RentalID    whereHelperint
	RentalDate  whereHelpertime_Time
	InventoryID whereHelperint
	CustomerID  whereHelperint
	ReturnDate  whereHelpernull_Time
	StaffID     whereHelperint
	LastUpdate  whereHelpertime_Time
}{
	RentalID:    whereHelperint{field: "\"rental\".\"rental_id\""},
	RentalDate:  whereHelpertime_Time{field: "\"rental\".\"rental_date\""},
	InventoryID: whereHelperint{field: "\"rental\".\"inventory_id\""},
	CustomerID:  whereHelperint{field: "\"rental\".\"customer_id\""},
	ReturnDate:  whereHelpernull_Time{field: "\"rental\".\"return_date\""},
	StaffID:     whereHelperint{field: "\"rental\".\"staff_id\""},
	LastUpdate:  whereHelpertime_Time{field: "\"rental\".\"last_update\""},
}

// RentalRels is where relationship names are stored.
var RentalRels = struct {
	Customer  string
	Inventory string
	Staff     string
	Payments  string
}{
	Customer:  "Customer",
	Inventory: "Inventory",
	Staff:     "Staff",
	Payments:  "Payments",
}

// rentalR is where relationships are stored.
type rentalR struct {
	Customer  *Customer
	Inventory *Inventory
	Staff     *Staff
	Payments  PaymentSlice
}

// NewStruct creates a new relationship struct
func (*rentalR) NewStruct() *rentalR {
	return &rentalR{}
}

// rentalL is where Load methods for each relationship are stored.
type rentalL struct{}

var (
	rentalAllColumns            = []string{"rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"}
	rentalColumnsWithoutDefault = []string{"rental_date", "inventory_id", "customer_id", "return_date", "staff_id"}
	rentalColumnsWithDefault    = []string{"rental_id", "last_update"}
	rentalPrimaryKeyColumns     = []string{"rental_id"}
)

type (
	// RentalSlice is an alias for a slice of pointers to Rental.
	// This should generally be used opposed to []Rental.
	RentalSlice []*Rental
	// RentalHook is the signature for custom Rental hook methods
	RentalHook func(context.Context, boil.ContextExecutor, *Rental) error

	rentalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rentalType                 = reflect.TypeOf(&Rental{})
	rentalMapping              = queries.MakeStructMapping(rentalType)
	rentalPrimaryKeyMapping, _ = queries.BindMapping(rentalType, rentalMapping, rentalPrimaryKeyColumns)
	rentalInsertCacheMut       sync.RWMutex
	rentalInsertCache          = make(map[string]insertCache)
	rentalUpdateCacheMut       sync.RWMutex
	rentalUpdateCache          = make(map[string]updateCache)
	rentalUpsertCacheMut       sync.RWMutex
	rentalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rentalBeforeInsertHooks []RentalHook
var rentalBeforeUpdateHooks []RentalHook
var rentalBeforeDeleteHooks []RentalHook
var rentalBeforeUpsertHooks []RentalHook

var rentalAfterInsertHooks []RentalHook
var rentalAfterSelectHooks []RentalHook
var rentalAfterUpdateHooks []RentalHook
var rentalAfterDeleteHooks []RentalHook
var rentalAfterUpsertHooks []RentalHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rental) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rental) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rental) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rental) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rental) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rental) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rental) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rental) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rental) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rentalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRentalHook registers your hook function for all future operations.
func AddRentalHook(hookPoint boil.HookPoint, rentalHook RentalHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rentalBeforeInsertHooks = append(rentalBeforeInsertHooks, rentalHook)
	case boil.BeforeUpdateHook:
		rentalBeforeUpdateHooks = append(rentalBeforeUpdateHooks, rentalHook)
	case boil.BeforeDeleteHook:
		rentalBeforeDeleteHooks = append(rentalBeforeDeleteHooks, rentalHook)
	case boil.BeforeUpsertHook:
		rentalBeforeUpsertHooks = append(rentalBeforeUpsertHooks, rentalHook)
	case boil.AfterInsertHook:
		rentalAfterInsertHooks = append(rentalAfterInsertHooks, rentalHook)
	case boil.AfterSelectHook:
		rentalAfterSelectHooks = append(rentalAfterSelectHooks, rentalHook)
	case boil.AfterUpdateHook:
		rentalAfterUpdateHooks = append(rentalAfterUpdateHooks, rentalHook)
	case boil.AfterDeleteHook:
		rentalAfterDeleteHooks = append(rentalAfterDeleteHooks, rentalHook)
	case boil.AfterUpsertHook:
		rentalAfterUpsertHooks = append(rentalAfterUpsertHooks, rentalHook)
	}
}

// One returns a single rental record from the query.
func (q rentalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Rental, error) {
	o := &Rental{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rental")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Rental records from the query.
func (q rentalQuery) All(ctx context.Context, exec boil.ContextExecutor) (RentalSlice, error) {
	var o []*Rental

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Rental slice")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Rental records in the query.
func (q rentalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rental rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rentalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rental exists")
	}

	return count > 0, nil
}

// Customer pointed to by the foreign key.
func (o *Rental) Customer(mods ...qm.QueryMod) customerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"customer_id\" = ?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	query := Customers(queryMods...)
	queries.SetFrom(query.Query, "\"customer\"")

	return query
}

// Inventory pointed to by the foreign key.
func (o *Rental) Inventory(mods ...qm.QueryMod) inventoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"inventory_id\" = ?", o.InventoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Inventories(queryMods...)
	queries.SetFrom(query.Query, "\"inventory\"")

	return query
}

// Staff pointed to by the foreign key.
func (o *Rental) Staff(mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"staff_id\" = ?", o.StaffID),
	}

	queryMods = append(queryMods, mods...)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staff\"")

	return query
}

// Payments retrieves all the payment's Payments with an executor.
func (o *Rental) Payments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payment\".\"rental_id\"=?", o.RentalID),
	)

	query := Payments(queryMods...)
	queries.SetFrom(query.Query, "\"payment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"payment\".*"})
	}

	return query
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rentalL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRental interface{}, mods queries.Applicator) error {
	var slice []*Rental
	var object *Rental

	if singular {
		object = maybeRental.(*Rental)
	} else {
		slice = *maybeRental.(*[]*Rental)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rentalR{}
		}
		args = append(args, object.CustomerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalR{}
			}

			for _, a := range args {
				if a == obj.CustomerID {
					continue Outer
				}
			}

			args = append(args, obj.CustomerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`customer`), qm.WhereIn(`customer.customer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for customer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customer")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &customerR{}
		}
		foreign.R.Rentals = append(foreign.R.Rentals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerID == foreign.CustomerID {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.Rentals = append(foreign.R.Rentals, local)
				break
			}
		}
	}

	return nil
}

// LoadInventory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rentalL) LoadInventory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRental interface{}, mods queries.Applicator) error {
	var slice []*Rental
	var object *Rental

	if singular {
		object = maybeRental.(*Rental)
	} else {
		slice = *maybeRental.(*[]*Rental)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rentalR{}
		}
		args = append(args, object.InventoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalR{}
			}

			for _, a := range args {
				if a == obj.InventoryID {
					continue Outer
				}
			}

			args = append(args, obj.InventoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`inventory`), qm.WhereIn(`inventory.inventory_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inventory")
	}

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inventory")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Inventory = foreign
		if foreign.R == nil {
			foreign.R = &inventoryR{}
		}
		foreign.R.Rentals = append(foreign.R.Rentals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InventoryID == foreign.InventoryID {
				local.R.Inventory = foreign
				if foreign.R == nil {
					foreign.R = &inventoryR{}
				}
				foreign.R.Rentals = append(foreign.R.Rentals, local)
				break
			}
		}
	}

	return nil
}

// LoadStaff allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rentalL) LoadStaff(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRental interface{}, mods queries.Applicator) error {
	var slice []*Rental
	var object *Rental

	if singular {
		object = maybeRental.(*Rental)
	} else {
		slice = *maybeRental.(*[]*Rental)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rentalR{}
		}
		args = append(args, object.StaffID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalR{}
			}

			for _, a := range args {
				if a == obj.StaffID {
					continue Outer
				}
			}

			args = append(args, obj.StaffID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`staff`), qm.WhereIn(`staff.staff_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for staff")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staff")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Staff = foreign
		if foreign.R == nil {
			foreign.R = &staffR{}
		}
		foreign.R.Rentals = append(foreign.R.Rentals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaffID == foreign.StaffID {
				local.R.Staff = foreign
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.Rentals = append(foreign.R.Rentals, local)
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rentalL) LoadPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRental interface{}, mods queries.Applicator) error {
	var slice []*Rental
	var object *Rental

	if singular {
		object = maybeRental.(*Rental)
	} else {
		slice = *maybeRental.(*[]*Rental)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rentalR{}
		}
		args = append(args, object.RentalID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalR{}
			}

			for _, a := range args {
				if a == obj.RentalID {
					continue Outer
				}
			}

			args = append(args, obj.RentalID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`payment`), qm.WhereIn(`payment.rental_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.Rental = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RentalID == foreign.RentalID {
				local.R.Payments = append(local.R.Payments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.Rental = local
				break
			}
		}
	}

	return nil
}

// SetCustomer of the rental to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.Rentals.
func (o *Rental) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Customer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rental\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"customer_id"}),
		strmangle.WhereClause("\"", "\"", 2, rentalPrimaryKeyColumns),
	)
	values := []interface{}{related.CustomerID, o.RentalID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerID = related.CustomerID
	if o.R == nil {
		o.R = &rentalR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &customerR{
			Rentals: RentalSlice{o},
		}
	} else {
		related.R.Rentals = append(related.R.Rentals, o)
	}

	return nil
}

// SetInventory of the rental to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.Rentals.
func (o *Rental) SetInventory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Inventory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rental\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"inventory_id"}),
		strmangle.WhereClause("\"", "\"", 2, rentalPrimaryKeyColumns),
	)
	values := []interface{}{related.InventoryID, o.RentalID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InventoryID = related.InventoryID
	if o.R == nil {
		o.R = &rentalR{
			Inventory: related,
		}
	} else {
		o.R.Inventory = related
	}

	if related.R == nil {
		related.R = &inventoryR{
			Rentals: RentalSlice{o},
		}
	} else {
		related.R.Rentals = append(related.R.Rentals, o)
	}

	return nil
}

// SetStaff of the rental to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.Rentals.
func (o *Rental) SetStaff(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rental\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"staff_id"}),
		strmangle.WhereClause("\"", "\"", 2, rentalPrimaryKeyColumns),
	)
	values := []interface{}{related.StaffID, o.RentalID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StaffID = related.StaffID
	if o.R == nil {
		o.R = &rentalR{
			Staff: related,
		}
	} else {
		o.R.Staff = related
	}

	if related.R == nil {
		related.R = &staffR{
			Rentals: RentalSlice{o},
		}
	} else {
		related.R.Rentals = append(related.R.Rentals, o)
	}

	return nil
}

// AddPayments adds the given related objects to the existing relationships
// of the rental, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Rental appropriately.
func (o *Rental) AddPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RentalID = o.RentalID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rental_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.RentalID, rel.PaymentID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RentalID = o.RentalID
		}
	}

	if o.R == nil {
		o.R = &rentalR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Rental: o,
			}
		} else {
			rel.R.Rental = o
		}
	}
	return nil
}

// Rentals retrieves all the records using an executor.
func Rentals(mods ...qm.QueryMod) rentalQuery {
	mods = append(mods, qm.From("\"rental\""))
	return rentalQuery{NewQuery(mods...)}
}

// FindRental retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRental(ctx context.Context, exec boil.ContextExecutor, rentalID int, selectCols ...string) (*Rental, error) {
	rentalObj := &Rental{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rental\" where \"rental_id\"=$1", sel,
	)

	q := queries.Raw(query, rentalID)

	err := q.Bind(ctx, exec, rentalObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rental")
	}

	return rentalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Rental) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rental provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rentalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rentalInsertCacheMut.RLock()
	cache, cached := rentalInsertCache[key]
	rentalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rentalAllColumns,
			rentalColumnsWithDefault,
			rentalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rentalType, rentalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rentalType, rentalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rental\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rental\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rental")
	}

	if !cached {
		rentalInsertCacheMut.Lock()
		rentalInsertCache[key] = cache
		rentalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Rental.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Rental) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rentalUpdateCacheMut.RLock()
	cache, cached := rentalUpdateCache[key]
	rentalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rentalAllColumns,
			rentalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rental, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rental\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rentalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rentalType, rentalMapping, append(wl, rentalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rental row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rental")
	}

	if !cached {
		rentalUpdateCacheMut.Lock()
		rentalUpdateCache[key] = cache
		rentalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rentalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rental")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rental")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RentalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rental\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rentalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rental slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rental")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Rental) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rental provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rentalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rentalUpsertCacheMut.RLock()
	cache, cached := rentalUpsertCache[key]
	rentalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rentalAllColumns,
			rentalColumnsWithDefault,
			rentalColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rentalAllColumns,
			rentalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rental, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rentalPrimaryKeyColumns))
			copy(conflict, rentalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rental\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(rentalType, rentalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rentalType, rentalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rental")
	}

	if !cached {
		rentalUpsertCacheMut.Lock()
		rentalUpsertCache[key] = cache
		rentalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Rental record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rental) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Rental provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rentalPrimaryKeyMapping)
	sql := "DELETE FROM \"rental\" WHERE \"rental_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rental")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rental")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rentalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rentalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rental")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rental")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RentalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rentalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rental\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rentalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rental slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rental")
	}

	if len(rentalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rental) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRental(ctx, exec, o.RentalID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RentalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RentalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rental\".* FROM \"rental\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rentalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RentalSlice")
	}

	*o = slice

	return nil
}

// RentalExists checks if the Rental row exists.
func RentalExists(ctx context.Context, exec boil.ContextExecutor, rentalID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rental\" where \"rental_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, rentalID)
	}
	row := exec.QueryRowContext(ctx, sql, rentalID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rental exists")
	}

	return exists, nil
}
