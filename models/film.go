// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Film is an object representing the database table.
type Film struct {
	FilmID          int               `boil:"film_id" json:"film_id" toml:"film_id" yaml:"film_id"`
	Title           string            `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description     null.String       `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ReleaseYear     null.Int          `boil:"release_year" json:"release_year,omitempty" toml:"release_year" yaml:"release_year,omitempty"`
	LanguageID      int               `boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	RentalDuration  int16             `boil:"rental_duration" json:"rental_duration" toml:"rental_duration" yaml:"rental_duration"`
	RentalRate      types.Decimal     `boil:"rental_rate" json:"rental_rate" toml:"rental_rate" yaml:"rental_rate"`
	Length          null.Int16        `boil:"length" json:"length,omitempty" toml:"length" yaml:"length,omitempty"`
	ReplacementCost types.Decimal     `boil:"replacement_cost" json:"replacement_cost" toml:"replacement_cost" yaml:"replacement_cost"`
	Rating          null.String       `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`
	LastUpdate      time.Time         `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`
	SpecialFeatures types.StringArray `boil:"special_features" json:"special_features,omitempty" toml:"special_features" yaml:"special_features,omitempty"`
	Fulltext        string            `boil:"fulltext" json:"fulltext" toml:"fulltext" yaml:"fulltext"`

	R *filmR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L filmL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilmColumns = struct {
	FilmID          string
	Title           string
	Description     string
	ReleaseYear     string
	LanguageID      string
	RentalDuration  string
	RentalRate      string
	Length          string
	ReplacementCost string
	Rating          string
	LastUpdate      string
	SpecialFeatures string
	Fulltext        string
}{
	FilmID:          "film_id",
	Title:           "title",
	Description:     "description",
	ReleaseYear:     "release_year",
	LanguageID:      "language_id",
	RentalDuration:  "rental_duration",
	RentalRate:      "rental_rate",
	Length:          "length",
	ReplacementCost: "replacement_cost",
	Rating:          "rating",
	LastUpdate:      "last_update",
	SpecialFeatures: "special_features",
	Fulltext:        "fulltext",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FilmWhere = struct {
	FilmID          whereHelperint
	Title           whereHelperstring
	Description     whereHelpernull_String
	ReleaseYear     whereHelpernull_Int
	LanguageID      whereHelperint
	RentalDuration  whereHelperint16
	RentalRate      whereHelpertypes_Decimal
	Length          whereHelpernull_Int16
	ReplacementCost whereHelpertypes_Decimal
	Rating          whereHelpernull_String
	LastUpdate      whereHelpertime_Time
	SpecialFeatures whereHelpertypes_StringArray
	Fulltext        whereHelperstring
}{
	FilmID:          whereHelperint{field: "\"film\".\"film_id\""},
	Title:           whereHelperstring{field: "\"film\".\"title\""},
	Description:     whereHelpernull_String{field: "\"film\".\"description\""},
	ReleaseYear:     whereHelpernull_Int{field: "\"film\".\"release_year\""},
	LanguageID:      whereHelperint{field: "\"film\".\"language_id\""},
	RentalDuration:  whereHelperint16{field: "\"film\".\"rental_duration\""},
	RentalRate:      whereHelpertypes_Decimal{field: "\"film\".\"rental_rate\""},
	Length:          whereHelpernull_Int16{field: "\"film\".\"length\""},
	ReplacementCost: whereHelpertypes_Decimal{field: "\"film\".\"replacement_cost\""},
	Rating:          whereHelpernull_String{field: "\"film\".\"rating\""},
	LastUpdate:      whereHelpertime_Time{field: "\"film\".\"last_update\""},
	SpecialFeatures: whereHelpertypes_StringArray{field: "\"film\".\"special_features\""},
	Fulltext:        whereHelperstring{field: "\"film\".\"fulltext\""},
}

// FilmRels is where relationship names are stored.
var FilmRels = struct {
	Language       string
	FilmActors     string
	FilmCategories string
	Inventories    string
}{
	Language:       "Language",
	FilmActors:     "FilmActors",
	FilmCategories: "FilmCategories",
	Inventories:    "Inventories",
}

// filmR is where relationships are stored.
type filmR struct {
	Language       *Language
	FilmActors     FilmActorSlice
	FilmCategories FilmCategorySlice
	Inventories    InventorySlice
}

// NewStruct creates a new relationship struct
func (*filmR) NewStruct() *filmR {
	return &filmR{}
}

// filmL is where Load methods for each relationship are stored.
type filmL struct{}

var (
	filmAllColumns            = []string{"film_id", "title", "description", "release_year", "language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "last_update", "special_features", "fulltext"}
	filmColumnsWithoutDefault = []string{"title", "description", "release_year", "language_id", "length", "special_features", "fulltext"}
	filmColumnsWithDefault    = []string{"film_id", "rental_duration", "rental_rate", "replacement_cost", "rating", "last_update"}
	filmPrimaryKeyColumns     = []string{"film_id"}
)

type (
	// FilmSlice is an alias for a slice of pointers to Film.
	// This should generally be used opposed to []Film.
	FilmSlice []*Film
	// FilmHook is the signature for custom Film hook methods
	FilmHook func(context.Context, boil.ContextExecutor, *Film) error

	filmQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filmType                 = reflect.TypeOf(&Film{})
	filmMapping              = queries.MakeStructMapping(filmType)
	filmPrimaryKeyMapping, _ = queries.BindMapping(filmType, filmMapping, filmPrimaryKeyColumns)
	filmInsertCacheMut       sync.RWMutex
	filmInsertCache          = make(map[string]insertCache)
	filmUpdateCacheMut       sync.RWMutex
	filmUpdateCache          = make(map[string]updateCache)
	filmUpsertCacheMut       sync.RWMutex
	filmUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var filmBeforeInsertHooks []FilmHook
var filmBeforeUpdateHooks []FilmHook
var filmBeforeDeleteHooks []FilmHook
var filmBeforeUpsertHooks []FilmHook

var filmAfterInsertHooks []FilmHook
var filmAfterSelectHooks []FilmHook
var filmAfterUpdateHooks []FilmHook
var filmAfterDeleteHooks []FilmHook
var filmAfterUpsertHooks []FilmHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Film) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Film) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Film) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Film) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Film) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Film) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Film) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Film) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Film) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilmHook registers your hook function for all future operations.
func AddFilmHook(hookPoint boil.HookPoint, filmHook FilmHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		filmBeforeInsertHooks = append(filmBeforeInsertHooks, filmHook)
	case boil.BeforeUpdateHook:
		filmBeforeUpdateHooks = append(filmBeforeUpdateHooks, filmHook)
	case boil.BeforeDeleteHook:
		filmBeforeDeleteHooks = append(filmBeforeDeleteHooks, filmHook)
	case boil.BeforeUpsertHook:
		filmBeforeUpsertHooks = append(filmBeforeUpsertHooks, filmHook)
	case boil.AfterInsertHook:
		filmAfterInsertHooks = append(filmAfterInsertHooks, filmHook)
	case boil.AfterSelectHook:
		filmAfterSelectHooks = append(filmAfterSelectHooks, filmHook)
	case boil.AfterUpdateHook:
		filmAfterUpdateHooks = append(filmAfterUpdateHooks, filmHook)
	case boil.AfterDeleteHook:
		filmAfterDeleteHooks = append(filmAfterDeleteHooks, filmHook)
	case boil.AfterUpsertHook:
		filmAfterUpsertHooks = append(filmAfterUpsertHooks, filmHook)
	}
}

// One returns a single film record from the query.
func (q filmQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Film, error) {
	o := &Film{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for film")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Film records from the query.
func (q filmQuery) All(ctx context.Context, exec boil.ContextExecutor) (FilmSlice, error) {
	var o []*Film

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Film slice")
	}

	if len(filmAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Film records in the query.
func (q filmQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count film rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q filmQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if film exists")
	}

	return count > 0, nil
}

// Language pointed to by the foreign key.
func (o *Film) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"language_id\" = ?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	query := Languages(queryMods...)
	queries.SetFrom(query.Query, "\"language\"")

	return query
}

// FilmActors retrieves all the film_actor's FilmActors with an executor.
func (o *Film) FilmActors(mods ...qm.QueryMod) filmActorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"film_actor\".\"film_id\"=?", o.FilmID),
	)

	query := FilmActors(queryMods...)
	queries.SetFrom(query.Query, "\"film_actor\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"film_actor\".*"})
	}

	return query
}

// FilmCategories retrieves all the film_category's FilmCategories with an executor.
func (o *Film) FilmCategories(mods ...qm.QueryMod) filmCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"film_category\".\"film_id\"=?", o.FilmID),
	)

	query := FilmCategories(queryMods...)
	queries.SetFrom(query.Query, "\"film_category\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"film_category\".*"})
	}

	return query
}

// Inventories retrieves all the inventory's Inventories with an executor.
func (o *Film) Inventories(mods ...qm.QueryMod) inventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"inventory\".\"film_id\"=?", o.FilmID),
	)

	query := Inventories(queryMods...)
	queries.SetFrom(query.Query, "\"inventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"inventory\".*"})
	}

	return query
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (filmL) LoadLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilm interface{}, mods queries.Applicator) error {
	var slice []*Film
	var object *Film

	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args = append(args, object.LanguageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}

			for _, a := range args {
				if a == obj.LanguageID {
					continue Outer
				}
			}

			args = append(args, obj.LanguageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`language`), qm.WhereIn(`language.language_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for language")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for language")
	}

	if len(filmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.Films = append(foreign.R.Films, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.LanguageID {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.Films = append(foreign.R.Films, local)
				break
			}
		}
	}

	return nil
}

// LoadFilmActors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (filmL) LoadFilmActors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilm interface{}, mods queries.Applicator) error {
	var slice []*Film
	var object *Film

	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args = append(args, object.FilmID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}

			for _, a := range args {
				if a == obj.FilmID {
					continue Outer
				}
			}

			args = append(args, obj.FilmID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`film_actor`), qm.WhereIn(`film_actor.film_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load film_actor")
	}

	var resultSlice []*FilmActor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice film_actor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on film_actor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for film_actor")
	}

	if len(filmActorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FilmActors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &filmActorR{}
			}
			foreign.R.Film = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FilmID == foreign.FilmID {
				local.R.FilmActors = append(local.R.FilmActors, foreign)
				if foreign.R == nil {
					foreign.R = &filmActorR{}
				}
				foreign.R.Film = local
				break
			}
		}
	}

	return nil
}

// LoadFilmCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (filmL) LoadFilmCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilm interface{}, mods queries.Applicator) error {
	var slice []*Film
	var object *Film

	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args = append(args, object.FilmID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}

			for _, a := range args {
				if a == obj.FilmID {
					continue Outer
				}
			}

			args = append(args, obj.FilmID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`film_category`), qm.WhereIn(`film_category.film_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load film_category")
	}

	var resultSlice []*FilmCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice film_category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on film_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for film_category")
	}

	if len(filmCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FilmCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &filmCategoryR{}
			}
			foreign.R.Film = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FilmID == foreign.FilmID {
				local.R.FilmCategories = append(local.R.FilmCategories, foreign)
				if foreign.R == nil {
					foreign.R = &filmCategoryR{}
				}
				foreign.R.Film = local
				break
			}
		}
	}

	return nil
}

// LoadInventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (filmL) LoadInventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilm interface{}, mods queries.Applicator) error {
	var slice []*Film
	var object *Film

	if singular {
		object = maybeFilm.(*Film)
	} else {
		slice = *maybeFilm.(*[]*Film)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filmR{}
		}
		args = append(args, object.FilmID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filmR{}
			}

			for _, a := range args {
				if a == obj.FilmID {
					continue Outer
				}
			}

			args = append(args, obj.FilmID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`inventory`), qm.WhereIn(`inventory.film_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load inventory")
	}

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inventory")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Inventories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &inventoryR{}
			}
			foreign.R.Film = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FilmID == foreign.FilmID {
				local.R.Inventories = append(local.R.Inventories, foreign)
				if foreign.R == nil {
					foreign.R = &inventoryR{}
				}
				foreign.R.Film = local
				break
			}
		}
	}

	return nil
}

// SetLanguage of the film to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Films.
func (o *Film) SetLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"film\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, filmPrimaryKeyColumns),
	)
	values := []interface{}{related.LanguageID, o.FilmID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.LanguageID
	if o.R == nil {
		o.R = &filmR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			Films: FilmSlice{o},
		}
	} else {
		related.R.Films = append(related.R.Films, o)
	}

	return nil
}

// AddFilmActors adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmActors.
// Sets related.R.Film appropriately.
func (o *Film) AddFilmActors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FilmActor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FilmID = o.FilmID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"film_actor\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"film_id"}),
				strmangle.WhereClause("\"", "\"", 2, filmActorPrimaryKeyColumns),
			)
			values := []interface{}{o.FilmID, rel.ActorID, rel.FilmID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FilmID = o.FilmID
		}
	}

	if o.R == nil {
		o.R = &filmR{
			FilmActors: related,
		}
	} else {
		o.R.FilmActors = append(o.R.FilmActors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &filmActorR{
				Film: o,
			}
		} else {
			rel.R.Film = o
		}
	}
	return nil
}

// AddFilmCategories adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.FilmCategories.
// Sets related.R.Film appropriately.
func (o *Film) AddFilmCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FilmCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FilmID = o.FilmID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"film_category\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"film_id"}),
				strmangle.WhereClause("\"", "\"", 2, filmCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.FilmID, rel.FilmID, rel.CategoryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FilmID = o.FilmID
		}
	}

	if o.R == nil {
		o.R = &filmR{
			FilmCategories: related,
		}
	} else {
		o.R.FilmCategories = append(o.R.FilmCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &filmCategoryR{
				Film: o,
			}
		} else {
			rel.R.Film = o
		}
	}
	return nil
}

// AddInventories adds the given related objects to the existing relationships
// of the film, optionally inserting them as new records.
// Appends related to o.R.Inventories.
// Sets related.R.Film appropriately.
func (o *Film) AddInventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Inventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FilmID = o.FilmID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"inventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"film_id"}),
				strmangle.WhereClause("\"", "\"", 2, inventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.FilmID, rel.InventoryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FilmID = o.FilmID
		}
	}

	if o.R == nil {
		o.R = &filmR{
			Inventories: related,
		}
	} else {
		o.R.Inventories = append(o.R.Inventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inventoryR{
				Film: o,
			}
		} else {
			rel.R.Film = o
		}
	}
	return nil
}

// Films retrieves all the records using an executor.
func Films(mods ...qm.QueryMod) filmQuery {
	mods = append(mods, qm.From("\"film\""))
	return filmQuery{NewQuery(mods...)}
}

// FindFilm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilm(ctx context.Context, exec boil.ContextExecutor, filmID int, selectCols ...string) (*Film, error) {
	filmObj := &Film{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"film\" where \"film_id\"=$1", sel,
	)

	q := queries.Raw(query, filmID)

	err := q.Bind(ctx, exec, filmObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from film")
	}

	return filmObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Film) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no film provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	filmInsertCacheMut.RLock()
	cache, cached := filmInsertCache[key]
	filmInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			filmAllColumns,
			filmColumnsWithDefault,
			filmColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(filmType, filmMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filmType, filmMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"film\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"film\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into film")
	}

	if !cached {
		filmInsertCacheMut.Lock()
		filmInsertCache[key] = cache
		filmInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Film.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Film) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	filmUpdateCacheMut.RLock()
	cache, cached := filmUpdateCache[key]
	filmUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			filmAllColumns,
			filmPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update film, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"film\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, filmPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filmType, filmMapping, append(wl, filmPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update film row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for film")
	}

	if !cached {
		filmUpdateCacheMut.Lock()
		filmUpdateCache[key] = cache
		filmUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q filmQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for film")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for film")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilmSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"film\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, filmPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in film slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all film")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Film) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no film provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filmUpsertCacheMut.RLock()
	cache, cached := filmUpsertCache[key]
	filmUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			filmAllColumns,
			filmColumnsWithDefault,
			filmColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			filmAllColumns,
			filmPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert film, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(filmPrimaryKeyColumns))
			copy(conflict, filmPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"film\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(filmType, filmMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filmType, filmMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert film")
	}

	if !cached {
		filmUpsertCacheMut.Lock()
		filmUpsertCache[key] = cache
		filmUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Film record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Film) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Film provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filmPrimaryKeyMapping)
	sql := "DELETE FROM \"film\" WHERE \"film_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from film")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for film")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q filmQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no filmQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from film")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for film")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilmSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(filmBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"film\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, filmPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from film slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for film")
	}

	if len(filmAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Film) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFilm(ctx, exec, o.FilmID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FilmSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"film\".* FROM \"film\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, filmPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FilmSlice")
	}

	*o = slice

	return nil
}

// FilmExists checks if the Film row exists.
func FilmExists(ctx context.Context, exec boil.ContextExecutor, filmID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"film\" where \"film_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, filmID)
	}
	row := exec.QueryRowContext(ctx, sql, filmID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if film exists")
	}

	return exists, nil
}
