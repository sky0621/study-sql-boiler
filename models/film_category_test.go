// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFilmCategories(t *testing.T) {
	t.Parallel()

	query := FilmCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFilmCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FilmCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FilmCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FilmCategoryExists(ctx, tx, o.FilmID, o.CategoryID)
	if err != nil {
		t.Errorf("Unable to check if FilmCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FilmCategoryExists to return true, but got false.")
	}
}

func testFilmCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	filmCategoryFound, err := FindFilmCategory(ctx, tx, o.FilmID, o.CategoryID)
	if err != nil {
		t.Error(err)
	}

	if filmCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFilmCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FilmCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFilmCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FilmCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFilmCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmCategoryOne := &FilmCategory{}
	filmCategoryTwo := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategoryOne, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, filmCategoryTwo, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = filmCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = filmCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FilmCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFilmCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	filmCategoryOne := &FilmCategory{}
	filmCategoryTwo := &FilmCategory{}
	if err = randomize.Struct(seed, filmCategoryOne, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, filmCategoryTwo, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = filmCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = filmCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func filmCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func filmCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FilmCategory) error {
	*o = FilmCategory{}
	return nil
}

func testFilmCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FilmCategory{}
	o := &FilmCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FilmCategory object: %s", err)
	}

	AddFilmCategoryHook(boil.BeforeInsertHook, filmCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	filmCategoryBeforeInsertHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterInsertHook, filmCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterInsertHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterSelectHook, filmCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterSelectHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.BeforeUpdateHook, filmCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	filmCategoryBeforeUpdateHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterUpdateHook, filmCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterUpdateHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.BeforeDeleteHook, filmCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	filmCategoryBeforeDeleteHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterDeleteHook, filmCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterDeleteHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.BeforeUpsertHook, filmCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	filmCategoryBeforeUpsertHooks = []FilmCategoryHook{}

	AddFilmCategoryHook(boil.AfterUpsertHook, filmCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	filmCategoryAfterUpsertHooks = []FilmCategoryHook{}
}

func testFilmCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(filmCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmCategoryToOneCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FilmCategory
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CategoryID = foreign.CategoryID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.CategoryID != foreign.CategoryID {
		t.Errorf("want: %v, got %v", foreign.CategoryID, check.CategoryID)
	}

	slice := FilmCategorySlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*FilmCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFilmCategoryToOneFilmUsingFilm(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FilmCategory
	var foreign Film

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, filmCategoryDBTypes, false, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, filmDBTypes, false, filmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Film struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FilmID = foreign.FilmID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Film().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FilmID != foreign.FilmID {
		t.Errorf("want: %v, got %v", foreign.FilmID, check.FilmID)
	}

	slice := FilmCategorySlice{&local}
	if err = local.L.LoadFilm(ctx, tx, false, (*[]*FilmCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Film = nil
	if err = local.L.LoadFilm(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFilmCategoryToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FilmCategory
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, filmCategoryDBTypes, false, strmangle.SetComplement(filmCategoryPrimaryKeyColumns, filmCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FilmCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID != x.CategoryID {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		if exists, err := FilmCategoryExists(ctx, tx, a.FilmID, a.CategoryID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testFilmCategoryToOneSetOpFilmUsingFilm(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FilmCategory
	var b, c Film

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, filmCategoryDBTypes, false, strmangle.SetComplement(filmCategoryPrimaryKeyColumns, filmCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Film{&b, &c} {
		err = a.SetFilm(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Film != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FilmCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FilmID != x.FilmID {
			t.Error("foreign key was wrong value", a.FilmID)
		}

		if exists, err := FilmCategoryExists(ctx, tx, a.FilmID, a.CategoryID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testFilmCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFilmCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FilmCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFilmCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FilmCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	filmCategoryDBTypes = map[string]string{`FilmID`: `integer`, `CategoryID`: `integer`, `LastUpdate`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testFilmCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(filmCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(filmCategoryAllColumns) == len(filmCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFilmCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(filmCategoryAllColumns) == len(filmCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FilmCategory{}
	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, filmCategoryDBTypes, true, filmCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(filmCategoryAllColumns, filmCategoryPrimaryKeyColumns) {
		fields = filmCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			filmCategoryAllColumns,
			filmCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FilmCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFilmCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(filmCategoryAllColumns) == len(filmCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FilmCategory{}
	if err = randomize.Struct(seed, &o, filmCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FilmCategory: %s", err)
	}

	count, err := FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, filmCategoryDBTypes, false, filmCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FilmCategory: %s", err)
	}

	count, err = FilmCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
