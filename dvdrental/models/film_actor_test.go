// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFilmActors(t *testing.T) {
	t.Parallel()

	query := FilmActors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFilmActorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmActorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FilmActors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmActorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FilmActorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFilmActorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FilmActorExists(ctx, tx, o.ActorID, o.FilmID)
	if err != nil {
		t.Errorf("Unable to check if FilmActor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FilmActorExists to return true, but got false.")
	}
}

func testFilmActorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	filmActorFound, err := FindFilmActor(ctx, tx, o.ActorID, o.FilmID)
	if err != nil {
		t.Error(err)
	}

	if filmActorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFilmActorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FilmActors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFilmActorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FilmActors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFilmActorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	filmActorOne := &FilmActor{}
	filmActorTwo := &FilmActor{}
	if err = randomize.Struct(seed, filmActorOne, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}
	if err = randomize.Struct(seed, filmActorTwo, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = filmActorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = filmActorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FilmActors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFilmActorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	filmActorOne := &FilmActor{}
	filmActorTwo := &FilmActor{}
	if err = randomize.Struct(seed, filmActorOne, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}
	if err = randomize.Struct(seed, filmActorTwo, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = filmActorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = filmActorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func filmActorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func filmActorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FilmActor) error {
	*o = FilmActor{}
	return nil
}

func testFilmActorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FilmActor{}
	o := &FilmActor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, filmActorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FilmActor object: %s", err)
	}

	AddFilmActorHook(boil.BeforeInsertHook, filmActorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	filmActorBeforeInsertHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterInsertHook, filmActorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	filmActorAfterInsertHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterSelectHook, filmActorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	filmActorAfterSelectHooks = []FilmActorHook{}

	AddFilmActorHook(boil.BeforeUpdateHook, filmActorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	filmActorBeforeUpdateHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterUpdateHook, filmActorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	filmActorAfterUpdateHooks = []FilmActorHook{}

	AddFilmActorHook(boil.BeforeDeleteHook, filmActorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	filmActorBeforeDeleteHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterDeleteHook, filmActorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	filmActorAfterDeleteHooks = []FilmActorHook{}

	AddFilmActorHook(boil.BeforeUpsertHook, filmActorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	filmActorBeforeUpsertHooks = []FilmActorHook{}

	AddFilmActorHook(boil.AfterUpsertHook, filmActorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	filmActorAfterUpsertHooks = []FilmActorHook{}
}

func testFilmActorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmActorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(filmActorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFilmActorToOneActorUsingActor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FilmActor
	var foreign Actor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, actorDBTypes, false, actorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Actor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ActorID = foreign.ActorID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Actor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ActorID != foreign.ActorID {
		t.Errorf("want: %v, got %v", foreign.ActorID, check.ActorID)
	}

	slice := FilmActorSlice{&local}
	if err = local.L.LoadActor(ctx, tx, false, (*[]*FilmActor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Actor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Actor = nil
	if err = local.L.LoadActor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Actor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFilmActorToOneFilmUsingFilm(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FilmActor
	var foreign Film

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, filmActorDBTypes, false, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, filmDBTypes, false, filmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Film struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FilmID = foreign.FilmID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Film().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FilmID != foreign.FilmID {
		t.Errorf("want: %v, got %v", foreign.FilmID, check.FilmID)
	}

	slice := FilmActorSlice{&local}
	if err = local.L.LoadFilm(ctx, tx, false, (*[]*FilmActor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Film = nil
	if err = local.L.LoadFilm(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFilmActorToOneSetOpActorUsingActor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FilmActor
	var b, c Actor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, filmActorDBTypes, false, strmangle.SetComplement(filmActorPrimaryKeyColumns, filmActorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, actorDBTypes, false, strmangle.SetComplement(actorPrimaryKeyColumns, actorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, actorDBTypes, false, strmangle.SetComplement(actorPrimaryKeyColumns, actorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Actor{&b, &c} {
		err = a.SetActor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Actor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FilmActors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ActorID != x.ActorID {
			t.Error("foreign key was wrong value", a.ActorID)
		}

		if exists, err := FilmActorExists(ctx, tx, a.ActorID, a.FilmID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testFilmActorToOneSetOpFilmUsingFilm(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FilmActor
	var b, c Film

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, filmActorDBTypes, false, strmangle.SetComplement(filmActorPrimaryKeyColumns, filmActorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Film{&b, &c} {
		err = a.SetFilm(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Film != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FilmActors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FilmID != x.FilmID {
			t.Error("foreign key was wrong value", a.FilmID)
		}

		if exists, err := FilmActorExists(ctx, tx, a.ActorID, a.FilmID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testFilmActorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFilmActorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FilmActorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFilmActorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FilmActors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	filmActorDBTypes = map[string]string{`ActorID`: `integer`, `FilmID`: `integer`, `LastUpdate`: `timestamp without time zone`}
	_                = bytes.MinRead
)

func testFilmActorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(filmActorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(filmActorAllColumns) == len(filmActorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFilmActorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(filmActorAllColumns) == len(filmActorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FilmActor{}
	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, filmActorDBTypes, true, filmActorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(filmActorAllColumns, filmActorPrimaryKeyColumns) {
		fields = filmActorAllColumns
	} else {
		fields = strmangle.SetComplement(
			filmActorAllColumns,
			filmActorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FilmActorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFilmActorsUpsert(t *testing.T) {
	t.Parallel()

	if len(filmActorAllColumns) == len(filmActorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FilmActor{}
	if err = randomize.Struct(seed, &o, filmActorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FilmActor: %s", err)
	}

	count, err := FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, filmActorDBTypes, false, filmActorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FilmActor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FilmActor: %s", err)
	}

	count, err = FilmActors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
