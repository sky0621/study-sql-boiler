// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FilmCategory is an object representing the database table.
type FilmCategory struct {
	FilmID     int       `boil:"film_id" json:"film_id" toml:"film_id" yaml:"film_id"`
	CategoryID int       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	LastUpdate time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *filmCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L filmCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilmCategoryColumns = struct {
	FilmID     string
	CategoryID string
	LastUpdate string
}{
	FilmID:     "film_id",
	CategoryID: "category_id",
	LastUpdate: "last_update",
}

// Generated where

var FilmCategoryWhere = struct {
	FilmID     whereHelperint
	CategoryID whereHelperint
	LastUpdate whereHelpertime_Time
}{
	FilmID:     whereHelperint{field: "\"film_category\".\"film_id\""},
	CategoryID: whereHelperint{field: "\"film_category\".\"category_id\""},
	LastUpdate: whereHelpertime_Time{field: "\"film_category\".\"last_update\""},
}

// FilmCategoryRels is where relationship names are stored.
var FilmCategoryRels = struct {
	Category string
	Film     string
}{
	Category: "Category",
	Film:     "Film",
}

// filmCategoryR is where relationships are stored.
type filmCategoryR struct {
	Category *Category
	Film     *Film
}

// NewStruct creates a new relationship struct
func (*filmCategoryR) NewStruct() *filmCategoryR {
	return &filmCategoryR{}
}

// filmCategoryL is where Load methods for each relationship are stored.
type filmCategoryL struct{}

var (
	filmCategoryAllColumns            = []string{"film_id", "category_id", "last_update"}
	filmCategoryColumnsWithoutDefault = []string{"film_id", "category_id"}
	filmCategoryColumnsWithDefault    = []string{"last_update"}
	filmCategoryPrimaryKeyColumns     = []string{"film_id", "category_id"}
)

type (
	// FilmCategorySlice is an alias for a slice of pointers to FilmCategory.
	// This should generally be used opposed to []FilmCategory.
	FilmCategorySlice []*FilmCategory
	// FilmCategoryHook is the signature for custom FilmCategory hook methods
	FilmCategoryHook func(context.Context, boil.ContextExecutor, *FilmCategory) error

	filmCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filmCategoryType                 = reflect.TypeOf(&FilmCategory{})
	filmCategoryMapping              = queries.MakeStructMapping(filmCategoryType)
	filmCategoryPrimaryKeyMapping, _ = queries.BindMapping(filmCategoryType, filmCategoryMapping, filmCategoryPrimaryKeyColumns)
	filmCategoryInsertCacheMut       sync.RWMutex
	filmCategoryInsertCache          = make(map[string]insertCache)
	filmCategoryUpdateCacheMut       sync.RWMutex
	filmCategoryUpdateCache          = make(map[string]updateCache)
	filmCategoryUpsertCacheMut       sync.RWMutex
	filmCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var filmCategoryBeforeInsertHooks []FilmCategoryHook
var filmCategoryBeforeUpdateHooks []FilmCategoryHook
var filmCategoryBeforeDeleteHooks []FilmCategoryHook
var filmCategoryBeforeUpsertHooks []FilmCategoryHook

var filmCategoryAfterInsertHooks []FilmCategoryHook
var filmCategoryAfterSelectHooks []FilmCategoryHook
var filmCategoryAfterUpdateHooks []FilmCategoryHook
var filmCategoryAfterDeleteHooks []FilmCategoryHook
var filmCategoryAfterUpsertHooks []FilmCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FilmCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FilmCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FilmCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FilmCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FilmCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FilmCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FilmCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FilmCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FilmCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilmCategoryHook registers your hook function for all future operations.
func AddFilmCategoryHook(hookPoint boil.HookPoint, filmCategoryHook FilmCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		filmCategoryBeforeInsertHooks = append(filmCategoryBeforeInsertHooks, filmCategoryHook)
	case boil.BeforeUpdateHook:
		filmCategoryBeforeUpdateHooks = append(filmCategoryBeforeUpdateHooks, filmCategoryHook)
	case boil.BeforeDeleteHook:
		filmCategoryBeforeDeleteHooks = append(filmCategoryBeforeDeleteHooks, filmCategoryHook)
	case boil.BeforeUpsertHook:
		filmCategoryBeforeUpsertHooks = append(filmCategoryBeforeUpsertHooks, filmCategoryHook)
	case boil.AfterInsertHook:
		filmCategoryAfterInsertHooks = append(filmCategoryAfterInsertHooks, filmCategoryHook)
	case boil.AfterSelectHook:
		filmCategoryAfterSelectHooks = append(filmCategoryAfterSelectHooks, filmCategoryHook)
	case boil.AfterUpdateHook:
		filmCategoryAfterUpdateHooks = append(filmCategoryAfterUpdateHooks, filmCategoryHook)
	case boil.AfterDeleteHook:
		filmCategoryAfterDeleteHooks = append(filmCategoryAfterDeleteHooks, filmCategoryHook)
	case boil.AfterUpsertHook:
		filmCategoryAfterUpsertHooks = append(filmCategoryAfterUpsertHooks, filmCategoryHook)
	}
}

// One returns a single filmCategory record from the query.
func (q filmCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FilmCategory, error) {
	o := &FilmCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for film_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FilmCategory records from the query.
func (q filmCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (FilmCategorySlice, error) {
	var o []*FilmCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FilmCategory slice")
	}

	if len(filmCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FilmCategory records in the query.
func (q filmCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count film_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q filmCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if film_category exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *FilmCategory) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"category_id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Categories(queryMods...)
	queries.SetFrom(query.Query, "\"category\"")

	return query
}

// Film pointed to by the foreign key.
func (o *FilmCategory) Film(mods ...qm.QueryMod) filmQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"film_id\" = ?", o.FilmID),
	}

	queryMods = append(queryMods, mods...)

	query := Films(queryMods...)
	queries.SetFrom(query.Query, "\"film\"")

	return query
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (filmCategoryL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilmCategory interface{}, mods queries.Applicator) error {
	var slice []*FilmCategory
	var object *FilmCategory

	if singular {
		object = maybeFilmCategory.(*FilmCategory)
	} else {
		slice = *maybeFilmCategory.(*[]*FilmCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filmCategoryR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filmCategoryR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`category`), qm.WhereIn(`category.category_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for category")
	}

	if len(filmCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.FilmCategories = append(foreign.R.FilmCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.CategoryID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.FilmCategories = append(foreign.R.FilmCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadFilm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (filmCategoryL) LoadFilm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilmCategory interface{}, mods queries.Applicator) error {
	var slice []*FilmCategory
	var object *FilmCategory

	if singular {
		object = maybeFilmCategory.(*FilmCategory)
	} else {
		slice = *maybeFilmCategory.(*[]*FilmCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filmCategoryR{}
		}
		args = append(args, object.FilmID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filmCategoryR{}
			}

			for _, a := range args {
				if a == obj.FilmID {
					continue Outer
				}
			}

			args = append(args, obj.FilmID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`film`), qm.WhereIn(`film.film_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Film")
	}

	var resultSlice []*Film
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Film")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for film")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for film")
	}

	if len(filmCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Film = foreign
		if foreign.R == nil {
			foreign.R = &filmR{}
		}
		foreign.R.FilmCategories = append(foreign.R.FilmCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FilmID == foreign.FilmID {
				local.R.Film = foreign
				if foreign.R == nil {
					foreign.R = &filmR{}
				}
				foreign.R.FilmCategories = append(foreign.R.FilmCategories, local)
				break
			}
		}
	}

	return nil
}

// SetCategory of the filmCategory to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.FilmCategories.
func (o *FilmCategory) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"film_category\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, filmCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.FilmID, o.CategoryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.CategoryID
	if o.R == nil {
		o.R = &filmCategoryR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			FilmCategories: FilmCategorySlice{o},
		}
	} else {
		related.R.FilmCategories = append(related.R.FilmCategories, o)
	}

	return nil
}

// SetFilm of the filmCategory to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.FilmCategories.
func (o *FilmCategory) SetFilm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Film) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"film_category\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"film_id"}),
		strmangle.WhereClause("\"", "\"", 2, filmCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.FilmID, o.FilmID, o.CategoryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FilmID = related.FilmID
	if o.R == nil {
		o.R = &filmCategoryR{
			Film: related,
		}
	} else {
		o.R.Film = related
	}

	if related.R == nil {
		related.R = &filmR{
			FilmCategories: FilmCategorySlice{o},
		}
	} else {
		related.R.FilmCategories = append(related.R.FilmCategories, o)
	}

	return nil
}

// FilmCategories retrieves all the records using an executor.
func FilmCategories(mods ...qm.QueryMod) filmCategoryQuery {
	mods = append(mods, qm.From("\"film_category\""))
	return filmCategoryQuery{NewQuery(mods...)}
}

// FindFilmCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilmCategory(ctx context.Context, exec boil.ContextExecutor, filmID int, categoryID int, selectCols ...string) (*FilmCategory, error) {
	filmCategoryObj := &FilmCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"film_category\" where \"film_id\"=$1 AND \"category_id\"=$2", sel,
	)

	q := queries.Raw(query, filmID, categoryID)

	err := q.Bind(ctx, exec, filmCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from film_category")
	}

	return filmCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FilmCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no film_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	filmCategoryInsertCacheMut.RLock()
	cache, cached := filmCategoryInsertCache[key]
	filmCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			filmCategoryAllColumns,
			filmCategoryColumnsWithDefault,
			filmCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"film_category\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"film_category\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into film_category")
	}

	if !cached {
		filmCategoryInsertCacheMut.Lock()
		filmCategoryInsertCache[key] = cache
		filmCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FilmCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FilmCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	filmCategoryUpdateCacheMut.RLock()
	cache, cached := filmCategoryUpdateCache[key]
	filmCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			filmCategoryAllColumns,
			filmCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update film_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"film_category\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, filmCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, append(wl, filmCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update film_category row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for film_category")
	}

	if !cached {
		filmCategoryUpdateCacheMut.Lock()
		filmCategoryUpdateCache[key] = cache
		filmCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q filmCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for film_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for film_category")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilmCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"film_category\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, filmCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in filmCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all filmCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FilmCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no film_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filmCategoryUpsertCacheMut.RLock()
	cache, cached := filmCategoryUpsertCache[key]
	filmCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			filmCategoryAllColumns,
			filmCategoryColumnsWithDefault,
			filmCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			filmCategoryAllColumns,
			filmCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert film_category, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(filmCategoryPrimaryKeyColumns))
			copy(conflict, filmCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"film_category\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filmCategoryType, filmCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert film_category")
	}

	if !cached {
		filmCategoryUpsertCacheMut.Lock()
		filmCategoryUpsertCache[key] = cache
		filmCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FilmCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FilmCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FilmCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filmCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"film_category\" WHERE \"film_id\"=$1 AND \"category_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from film_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for film_category")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q filmCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no filmCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from film_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for film_category")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilmCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(filmCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"film_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, filmCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from filmCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for film_category")
	}

	if len(filmCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FilmCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFilmCategory(ctx, exec, o.FilmID, o.CategoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FilmCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"film_category\".* FROM \"film_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, filmCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FilmCategorySlice")
	}

	*o = slice

	return nil
}

// FilmCategoryExists checks if the FilmCategory row exists.
func FilmCategoryExists(ctx context.Context, exec boil.ContextExecutor, filmID int, categoryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"film_category\" where \"film_id\"=$1 AND \"category_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, filmID, categoryID)
	}
	row := exec.QueryRowContext(ctx, sql, filmID, categoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if film_category exists")
	}

	return exists, nil
}
